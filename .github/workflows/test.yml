name: Run tests and checks

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage coverage-badge

      - name: Run tests and generate coverage
        run: |
          coverage run -m unittest discover
          coverage report
          coverage xml

      - name: Generate Coverage Badge
        run: |
          mkdir -p .github/badges
          coverage-badge -f -o .github/badges/coverage.svg

      - name: Log coverage percentage
        run: |
          coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//' | xargs -I {} echo "Coverage Percentage: {}%"

      - name: Commit the badge (if it changed)
        run: |
          if [[ `git status --porcelain` ]]; then
            git config --global user.name 'Rachel-Ruixuan'
            git config --global user.email 'Rachel-Ruixuan@users.noreply.github.com'
            git add .github/badges/coverage.svg
            git commit -m "Autogenerated Python coverage badge [skip ci]"
            git push
          fi

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-report
          path: coverage.xml


  style-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: 'x64'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pycodestyle

      - name: Python Style Checker
        run: |
          pycodestyle .


